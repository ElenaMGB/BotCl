import logging
import asyncio
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import config

API_TOKEN = config.token_api

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤
LESSONS_FILE = 'lessons.json'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_lessons():
    try:
        with open(LESSONS_FILE, 'r') as file:
            data = json.load(file)
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏: {data}")
            return data
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤: {e}")
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –≤ —Ñ–∞–π–ª
def save_lessons(lessons):
    with open(LESSONS_FILE, 'w') as file:
        json.dump(lessons, file)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç üòã! –ò—Å–ø–æ–ª—å–∑—É–π /schedule –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞.")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /schedule
@dp.message(Command("schedule"))
async def cmd_schedule(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD HH:MM'.")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
@dp.message()
async def process_schedule(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if message.text.startswith('/'):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã

    try:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        lesson_time = datetime.strptime(message.text, '%Y-%m-%d %H:%M')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–∫ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–æ—à–ª–æ–º
        if lesson_time < datetime.now():
            await message.answer("–ù–µ–ª—å–∑—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫ –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Ä–æ–∫–∏
        lessons = load_lessons()
        user_id = str(message.from_user.id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–∫
        if user_id not in lessons:
            lessons[user_id] = []

        lessons[user_id].append(lesson_time.strftime('%Y-%m-%d %H:%M'))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ —Ñ–∞–π–ª
        save_lessons(lessons)

        logging.info(f"–£—Ä–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω: {lesson_time} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
        await message.answer(f"–£—Ä–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {lesson_time.strftime('%Y-%m-%d %H:%M')}!")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'YYYY-MM-DD HH:MM'.")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /lessons –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
@dp.message(Command("lessons"))
async def cmd_lessons(message: types.Message):
    user_id = str(message.from_user.id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä–æ–∫—É
    lessons = load_lessons()

    user_lessons = lessons.get(user_id, [])

    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏: {user_lessons}")

    if not user_lessons:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.")
        return

    response = "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏:\n"
    for lesson_time in sorted(user_lessons, key=lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M')):
        response += f"- {lesson_time}\n"

    await message.answer(response)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())